podTemplate(label: 'sonarrunner', name: 'sonarrunner', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: '172.50.0.2:5000/openshift/jenkins-slave-sonar',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1500m',
    resourceRequestMemory: '2Gi',
    resourceLimitMemory: '4Gi',
    workingDir: '/tmp',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}'
  )
]) {
    node('sonarrunner') {

        stage('Code Quality Check') {
        //the checkout is mandatory, otherwise code quality check would fail
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm
            SONARQUBE_PWD = sh (
                script: 'oc env dc/sonarqube --list | awk  -F  "=" \'/SONARQUBE_ADMINPW/{print $2}\'',
                returnStdout: true
            ).trim()
            echo "SONARQUBE_PWD: ${SONARQUBE_PWD}"

            SONARQUBE_URL = sh (
                script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
                returnStdout: true
            ).trim()
            echo "SONARQUBE_URL: ${SONARQUBE_URL}"

            dir('sonar-runner') {
                try {
                    sh "./scan.sh"
                } finally {
                }
                try { 
                    sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info  -Dsonar.sources=.."
                } finally {}
            }
        }
    }
}    	
